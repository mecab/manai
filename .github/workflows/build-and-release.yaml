name: Build and Release

on:
  push:
    tags:
      - '*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.set_release_output.outputs.id }}
      upload_url: ${{ steps.set_release_output.outputs.upload_url }}

    steps:
    - name: Get Release
      id: get_release
      uses: joutvhu/get-release@v1
      with:
        tag_name: ${{ github.ref_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      id: create_release
      if: ${{ steps.get_release.outputs.id == '' }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

    - name: Set Release Output
      id: set_release_output
      run: |
        echo "id=${{ steps.get_release.outputs.id || steps.create_release.outputs.id }}" >> $GITHUB_OUTPUT
        echo "upload_url=${{ steps.get_release.outputs.upload_url || steps.create_release.outputs.upload_url }}" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        target: [bun-linux-x64, bun-linux-arm64, bun-darwin-x64, bun-darwin-arm64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: 1.1.9

    - name: Install dependencies
      run: bun install

    - name: Build binary
      run: bun build ./app.ts --compile --outfile bin/manai --target=${{ matrix.target }}

    - name: Compress binary
      run: tar -czf manai-${{ matrix.target }}.tar.gz bin/

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: manai-${{ matrix.target }}
        path: manai-${{ matrix.target }}.tar.gz

  release:
    needs: [create-release, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [bun-linux-x64, bun-linux-arm64, bun-darwin-x64, bun-darwin-arm64]

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: manai-${{ matrix.target }}

    - name: Get Release Assets
      id: get_assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        assets=$(gh api /repos/${{ github.repository }}/releases/${{ needs.create-release.outputs.release_id }}/assets | jq -r '.[] | select(.name == "manai-${{ matrix.target }}.tar.gz") | .id')
        echo "assets=${assets}" >> $GITHUB_OUTPUT

    - name: Delete Existing Asset
      if: ${{ steps.get_assets.outputs.assets != '' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh api /repos/${{ github.repository }}/releases/assets/${{ steps.get_assets.outputs.assets }} -X DELETE

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: manai-${{ matrix.target }}.tar.gz
        asset_name: manai-${{ matrix.target }}.tar.gz
        asset_content_type: application/gzip